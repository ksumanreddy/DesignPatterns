The Builder Pattern is a creational design pattern that lets you construct complex objects step by step. It allows you to create different types and representations of an object using the same construction code.

Why Use the Builder Pattern?
Imagine you want to create a User object with many optional fields like email, phone, address, etc. Using a constructor with many parameters becomes confusing and error-prone. Builder pattern solves this problem elegantly.

Benefits
Avoids telescoping constructors (constructors with lots of parameters).
Makes the code more readable and maintainable.
Allows immutable object creation.
Flexible â€” you can create different configurations of the same object.

// Product
public class User {
    private String firstName;
    private String lastName;
    private String email;
    private String phone;

    private User(UserBuilder builder) {
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.email = builder.email;
        this.phone = builder.phone;
    }

    public static class UserBuilder {
        private String firstName;
        private String lastName;
        private String email;
        private String phone;

        public UserBuilder(String firstName, String lastName) {
            this.firstName = firstName;
            this.lastName = lastName;
        }

        public UserBuilder email(String email) {
            this.email = email;
            return this;
        }

        public UserBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }

        public User build() {
            return new User(this);
        }
    }

    @Override
    public String toString() {
        return firstName + " " + lastName + ", Email: " + email + ", Phone: " + phone;
    }
}


public class Main {
    public static void main(String[] args) {
        User user = new User.UserBuilder("Suman", "K")
                          .email("suman@example.com")
                          .phone("1234567890")
                          .build();

        System.out.println(user);
    }
}
